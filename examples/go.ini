[darwin.curl]
check = command -v curl
apply[] = echo '❌ curl precisa estar instalado manualmente ou via gerenciador de pacotes.'
apply[] = exit 1
revert[] = echo "Curl normalmente não desinstala via script"
note = ! curl não está instalado. Por favor, instale manualmente via gerenciador de pacotes ou instale wget como alternativa.

[darwin.wget]
check = command -v wget
apply[] = echo '❌ wget precisa estar instalado manualmente ou via gerenciador de pacotes.'
apply[] = exit 1
revert[] = echo "Wget normalmente não desinstala via script"
note = ! wget não está instalado. Instale manualmente.

[darwin.git]
check = command -v git
apply[] = brew install git
revert[] = brew uninstall git

[darwin.docker]
check = command -v docker
apply[] = brew install --cask docker
revert[] = brew uninstall --cask docker

[darwin.bats]
check = command -v bats
dependsOn[] = darwin.brew
apply[] = brew install bats-core
revert[] = brew uninstall bats-core

[darwin.gum]
check = command -v gum
dependsOn[] = darwin.brew
apply[] = brew install charmbracelet/tap/gum
revert[] = brew uninstall charmbracelet/tap/gum

[darwin.rustc]
check = command -v rustc
dependsOn[] = darwin.curl
apply[] = curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
revert[] = rustup self uninstall -y
note = ! Rust (rustc) não está instalado. Será instalado automaticamente via rustup.

[darwin.just]
check = command -v just
dependsOn[] = darwin.brew
apply[] = brew install just
revert[] = brew uninstall just
note = ! just não está instalado. Será instalado automaticamente via Homebrew.

[darwin.bun]
check = command -v bun
dependsOn[] = darwin.curl
apply[] = curl -fsSL https://bun.sh/install | bash
revert[] = rm -rf ~/.bun ~/.bun-install

[darwin.brew]
check = command -v brew
dependsOn[] = darwin.curl
apply[] = /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
revert[] = /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"

[darwin.go]
check = command -v go
dependsOn[] = darwin.brew
apply[] = brew install go
revert[] = brew uninstall go
note = ! Go (golang) não está instalado. Será instalado automaticamente via Homebrew.

[darwin.python3]
check = command -v python3
dependsOn[] = darwin.brew
apply[] = brew install python
revert[] = brew uninstall python

[darwin.pipx]
check = command -v pipx
dependsOn[] = darwin.python3
dependsOn[] = darwin.brew
apply[] = brew install pipx
apply[] = pipx ensurepath
revert[] = brew uninstall pipx

[darwin.pre-commit]
check = command -v pre-commit
dependsOn[] = darwin.pipx
apply[] = pipx install pre-commit
revert[] = pipx uninstall pre-commit

[darwin.sqlc]
check = command -v sqlc
dependsOn[] = darwin.brew
apply[] = brew install sqlc
revert[] = brew uninstall sqlc

[darwin.shfmt]
check = command -v shfmt
dependsOn[] = darwin.brew
apply[] = brew install shfmt
revert[] = brew uninstall shfmt
note = ! shfmt não está instalado. Será instalado automaticamente via Homebrew.

[darwin.shellcheck]
check = command -v shellcheck
dependsOn[] = darwin.brew
apply[] = brew install shellcheck
revert[] = brew uninstall shellcheck
note = ! shellcheck não está instalado. Será instalado automaticamente via Homebrew.

[darwin.golangci-lint]
check = command -v golangci-lint
dependsOn[] = darwin.brew
apply[] = brew install golangci-lint
revert[] = brew uninstall golangci-lint
note = ! golangci-lint não está instalado. Será instalado automaticamente via Homebrew.

[darwin.golang-migrate]
check = command -v migrate
dependsOn[] = darwin.brew
apply[] = brew install golang-migrate
revert[] = brew uninstall golang-migrate
note = ! golang-migrate não está instalado. Será instalado automaticamente via Homebrew.

[air]
check = command -v air
dependsOn[] = go
apply[] = go install github.com/air-verse/air@latest
revert[] = rm -f "$(go env GOPATH)/bin/air"
note = ! air não está instalado. Será instalado via go install.
